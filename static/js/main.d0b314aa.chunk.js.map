{"version":3,"sources":["messages.js","component/App.js","serviceWorker.js","index.js"],"names":["lang","fi","App","onRadioChange","e","target","dataset","order","i","parseInt","setState","update","state","answers","$set","value","resetSurvey","analysis","activeQuestion","chartData","y","showSummary","summaryText","className","id","Object","keys","map","style","backgroundColor","color","defaultMessage","headline","pros","cons","tip","onClick","type","summaryChart","viewBox","standalone","width","height","colorScale","innerRadius","labelRadius","animate","duration","onLoad","data","fillOpacity","labels","size","fill","textAnchor","fontSize","x","onSubmit","preventDefault","numRed","numBlue","numGreen","numYellow","summaries","max","Math","push","types","red","blue","green","yellow","label","questions","length","toFixed","setTimeout","handleNavigate","goBack","direction","getQuestions","index","key","question","answer","checked","onChange","surveyNavigation","disabled","val","class","bind","this","values","newP","TransitionGroup","component","CSSTransition","classNames","timeout","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","locale","messages","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0b314aa.chunk.js","sourcesContent":["\r\nconst lang = { fi : {\r\n  'homepage.headline': '21 kysymystä persoonallisuudestasi',\r\n  'summary.headline': 'Olet väriltäsi:',\r\n  'homepage.info': 'Allaoleva testi on kysely, jonka avulla saat alustavan käsityksen omasta temperamentistasi. Valitse se vaihtoehto, joka kuvastaa itseäsi parhaiten juuri nyt.{newP}Persoonallisuutesi kokonaisuus selviää tutkimalla, keskustelemalla, pohtimalla ja ennen kaikkea elämällä – testi tai kysely toimii aina vain itsetuntemuksen ja ihmistuntemuksen apuvälineenä. Muista: temperamentti on vain yksi ulottuvuus ihmisen laajassa ja moniulotteisesta persoonallisuudesta.',\r\n  'character': 'Luonne:',\r\n  'weaknesses': 'Heikkoudet:',\r\n  'tip': 'Treenattavaa:',\r\n  'btn.reset': 'Aloita alusta',\r\n  'btn.next': 'Seuraava',\r\n  'btn.previous': 'Edellinen',\r\n  'btn.submit': 'Näytä tulokseni'\r\n}}\r\n\r\nexport default lang;\r\n","\r\nimport React, { Component } from 'react';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { VictoryPie, VictoryLabel } from 'victory';\r\nimport update from 'immutability-helper';\r\n\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport data from './data/data.json'\r\n\r\nimport './styles/App.scss';\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            answers: [],\r\n            analysis: [],\r\n            activeQuestion: 0,\r\n            chartData: [{ y: 5 }, { y: 5 }, { y: 5 }, { y: 5 }],\r\n            showSummary: false\r\n        };\r\n\r\n        this.onRadioChange = this.onRadioChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onRadioChange = (e) => {\r\n        if (e.target.dataset.order) {\r\n            var i = parseInt(e.target.dataset.order);\r\n            this.setState(\r\n                update(this.state, {\r\n                    answers: {\r\n                        [i]: {\r\n                            $set: e.target.value\r\n                        }\r\n                    }\r\n            }));\r\n        }\r\n    }\r\n\r\n    resetSurvey = () => {\r\n        this.setState({\r\n            answers: [],\r\n            analysis: [],\r\n            activeQuestion: 0,\r\n            chartData: [{ y: 5 }, { y: 5 }, { y: 5 }, { y: 5 }],\r\n            showSummary: false\r\n        })\r\n    }\r\n\r\n    summaryText = () => {\r\n            return (\r\n                <div className=\"summaryText\">\r\n\r\n                    <h2><FormattedMessage id=\"summary.headline\" /></h2>\r\n\r\n                    {Object.keys(this.state.analysis).map(analysis => (\r\n                        <div className=\"div-analysis\">\r\n                            <p>\r\n                                <h5 style={{ backgroundColor: this.state.analysis[analysis].color }} >\r\n                                    <FormattedMessage id=\"headline[{analysis}]\" defaultMessage={this.state.analysis[analysis].headline} />\r\n                                </h5>\r\n                                <span><FormattedMessage id=\"character\" /></span>\r\n                                <FormattedMessage id=\"pros[{analysis}]\" defaultMessage={this.state.analysis[analysis].pros} />\r\n                            </p>\r\n                            <p>\r\n                                <span><FormattedMessage id=\"weaknesses\"/></span>\r\n                                <FormattedMessage id=\"cons[{analysis}]\" defaultMessage={this.state.analysis[analysis].cons} />\r\n                            </p>\r\n                            <p>\r\n                                <span><FormattedMessage id=\"tip\" /></span>\r\n                                <FormattedMessage id=\"cons[{analysis}]\" defaultMessage={this.state.analysis[analysis].tip} />\r\n                            </p>\r\n                            <hr />\r\n                        </div>\r\n                    ))}\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            this.resetSurvey();\r\n                        }}\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger btn-lg\"><FormattedMessage id=\"btn.reset\" />\r\n                    </button>\r\n                </div>\r\n            )\r\n    }\r\n\r\n    summaryChart = () => {\r\n        return (\r\n            <svg viewBox=\"0 0 400 400\">\r\n                <VictoryPie\r\n                standalone={false}\r\n                width={400} height={400}\r\n                colorScale={[\"red\", \"green\", \"blue\", \"yellow\"]}\r\n                innerRadius={68} labelRadius={150}\r\n                animate={{ duration: 2000, onLoad: { duration: 1000 } }}\r\n                data={this.state.chartData}\r\n                style={{\r\n                    data: {\r\n                        fillOpacity: 0.93\r\n                    },\r\n                    labels: {\r\n                        size: 20,\r\n                        fill: \"#4d4d4d\"\r\n                    }\r\n                }}\r\n                />\r\n                <VictoryLabel\r\n                    textAnchor=\"middle\"\r\n                    style={{ fontSize: 100, fill: \"#E4952B\" }}\r\n                    x={200} y={200}\r\n                />\r\n            </svg>\r\n        )\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        var numRed = 0;\r\n        var numBlue = 0;\r\n        var numGreen = 0;\r\n        var numYellow = 0;\r\n\r\n        // Calculate answers based on colors\r\n        this.state.answers.map((color) => {\r\n\r\n            switch (color) {\r\n                case \"blue\": numBlue++;\r\n                    break;\r\n                case \"red\": numRed++;\r\n                    break;\r\n                case \"green\": numGreen++;\r\n                    break;\r\n                case \"yellow\": numYellow++;\r\n                    break;\r\n                default: break;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        // TODO: Better logic for checking all max value types ?!\r\n        var analysis = [];\r\n        var summaries = [numRed, numBlue, numGreen, numYellow]\r\n        var max = Math.max(...summaries);\r\n        if (summaries[0] === max) {\r\n            analysis.push(data.types.red);\r\n        }\r\n\r\n        if (summaries[1] === max) {\r\n            analysis.push(data.types.blue);\r\n        }\r\n\r\n        if (summaries[2] === max) {\r\n            analysis.push(data.types.green);;\r\n        }\r\n\r\n        if (summaries[3] === max) {\r\n            analysis.push(data.types.yellow);\r\n        }\r\n        // -->\r\n\r\n        var chartData = [\r\n            { y: numRed, label: (numRed / data.questions.length * 100).toFixed(2) + \"%\" },\r\n            { y: numGreen, label: (numGreen / data.questions.length * 100).toFixed(2) + \"%\" },\r\n            { y: numBlue, label: (numBlue / data.questions.length * 100).toFixed(2) + \"%\" },\r\n            { y: numYellow, label: (numYellow / data.questions.length * 100).toFixed(2) + \"%\" }\r\n        ];\r\n\r\n        this.setState(() => ({\r\n            showSummary: true,\r\n            analysis: analysis,\r\n        }), () => {\r\n            setTimeout(() => {\r\n                this.setState(() => ({\r\n                    chartData: chartData\r\n                }));\r\n            }, 150);\r\n        });\r\n    }\r\n\r\n    // Navigate questions back and forth\r\n    handleNavigate = (goBack) => {\r\n        if (typeof goBack !== \"undefined\") {\r\n            var direction = (goBack === true) ? this.state.activeQuestion - 1 : this.state.activeQuestion + 1;\r\n            this.setState({\r\n                activeQuestion: direction\r\n            })\r\n        }\r\n    }\r\n\r\n    getQuestions = () => {\r\n        var newdata = data.questions.map((data, index) => {\r\n            if (this.state.activeQuestion === index) {\r\n            return (\r\n                <div key=\"question-{index+1}\">\r\n                    <h4>{data.question}:</h4>\r\n                    <ul>\r\n                        {Object.keys(data.answers).map((answer, i) => (\r\n                            <li key={i}>\r\n                                <label className={this.state.answers[index] === data.answers[answer].color  ? \"radio-selected\" : \"\"} >\r\n                                    <span>{answer}</span>\r\n\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        value={data.answers[answer].color}\r\n                                        data-order={index}\r\n                                        checked={this.state.answers[index] === data.answers[answer].color }\r\n                                        onChange={this.onRadioChange}\r\n                                    />\r\n                                </label>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n                )\r\n            } return \"\"\r\n        })\r\n        return newdata;\r\n    }\r\n\r\n    surveyNavigation = () => {\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        this.handleNavigate(true);\r\n                    }}\r\n                    type = \"button\"\r\n                    disabled = { this.state.activeQuestion < 1 }\r\n                    className=\"btn btn-warning btn-lg\" >\r\n                        <FormattedMessage id=\"btn.previous\" />\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.handleNavigate(false);\r\n                    }}\r\n                    type=\"button\"\r\n                    disabled={(this.state.activeQuestion >= data.questions.length - 1) || (this.state.activeQuestion >= this.state.answers.length )}\r\n                    className=\"btn btn-success btn-lg\">\r\n                        <FormattedMessage id=\"btn.next\" />\r\n                </button>\r\n                <br />\r\n                {this.state.answers.length === data.questions.length && (\r\n                    <FormattedMessage id=\"btn.submit\" >\r\n                        {val =>\r\n                            <input type=\"submit\" value={val} class=\"btn btn-primary btn-lg\" />\r\n                        }\r\n                    </FormattedMessage>)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <h1><FormattedMessage id=\"homepage.headline\" /></h1>\r\n                        </div>\r\n                    </div>\r\n                    {this.state.showSummary === false && (\r\n                        <div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <p className=\"infoText\">\r\n                                        <FormattedMessage\r\n                                            id=\"homepage.info\"\r\n                                            values={{\r\n                                                newP: <span><br /><br /></span>,\r\n                                            }} />\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <form onSubmit={this.onSubmit} className=\"surveyForm\">\r\n                                        {this.getQuestions()}\r\n                                        {this.surveyNavigation()}\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <TransitionGroup component={null}>\r\n                    {this.state.showSummary === true && (\r\n                        <CSSTransition classNames=\"chart\" timeout={300}>\r\n                            <div className=\"row\">\r\n                                    <div className=\"col-lg-6\">\r\n                                    {this.summaryText()}\r\n                                </div>\r\n                                    <div className=\"col-lg-6\">\r\n                                    {this.summaryChart()}\r\n                                </div>\r\n                            </div>\r\n                        </CSSTransition>\r\n                    )}\r\n                    </TransitionGroup>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { IntlProvider } from \"react-intl\";\r\nimport messages from './messages';\r\n\r\nimport '@formatjs/intl-relativetimeformat/polyfill'\r\nimport '@formatjs/intl-relativetimeformat/locale-data/fi'\r\n\r\nimport './index.scss';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n   <React.StrictMode >\r\n        <IntlProvider locale='fi' messages={messages[\"fi\"]}>\r\n            <App />\r\n        </IntlProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}