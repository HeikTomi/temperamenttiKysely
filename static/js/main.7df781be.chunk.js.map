{"version":3,"sources":["messages.js","component/Header.js","component/Pageinfo.js","component/App.js","serviceWorker.js","index.js"],"names":["lang","fi","en","Header","className","id","Component","PageInfo","values","newP","onClick","props","startSurvey","onChange","e","changeLang","target","value","message","App","language","setState","document","title","data","data_fi","data_en","onRadioChange","dataset","order","i","parseInt","update","state","answers","$set","activeQuestion","questions","length","goToNext","resetSurvey","hideInfo","analysis","chartData","y","showSummary","summaryText","Object","keys","map","style","backgroundColor","color","headline","pros","cons","tip","type","summaryChart","viewBox","standalone","width","height","colorScale","types","red","green","blue","yellow","innerRadius","labelRadius","animate","duration","onLoad","fillOpacity","labels","size","fill","textAnchor","fontSize","x","onSubmit","preventDefault","numRed","numBlue","numGreen","numYellow","totalQuestions","summaries","max","Math","push","label","toFixed","setTimeout","handleNavigate","goBack","direction","getQuestions","index","question","answer","checked","surveyNavigation","disabled","val","bind","locale","this","messages","TransitionGroup","component","CSSTransition","classNames","timeout","Boolean","window","location","hostname","match","test","navigator","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7df781be.chunk.js","sourcesContent":["\r\nconst lang = {\r\n  fi : {\r\n    'homepage.headline': '21 kysymystä persoonallisuudestasi',\r\n    'summary.headline': 'Olet väriltäsi:',\r\n    'homepage.info': 'Tämän kyselyn avulla saat alustavan käsityksen omasta temperamentistasi. Valitse se vaihtoehto, joka kuvastaa itseäsi parhaiten juuri nyt.{newP}Persoonallisuutesi kokonaisuus selviää tutkimalla, keskustelemalla, pohtimalla ja ennen kaikkea elämällä – testi tai kysely toimii aina vain itsetuntemuksen ja ihmistuntemuksen apuvälineenä. Muista: temperamentti on vain yksi ulottuvuus ihmisen laajassa ja moniulotteisesta persoonallisuudesta.',\r\n    'character': 'Luonne:',\r\n    'weaknesses': 'Heikkoudet:',\r\n    'tip': 'Treenattavaa:',\r\n    'btn.start': 'Aloita kysely',\r\n    'btn.reset': 'Aloita alusta',\r\n    'btn.next': 'Seuraava',\r\n    'btn.previous': 'Edellinen',\r\n    'btn.submit': 'Näytä tulokseni',\r\n    'btn.languageSelector' : \"Vaihda kieli\"\r\n  },\r\n\r\n  en : {\r\n    'homepage.headline': '21 questions about your personality',\r\n    'summary.headline': 'Your color is:',\r\n    'homepage.info': 'This inquery helps you to get the basic knowledge about your temperament. Choose an option, which is most accurate at the moment.{newP}Your personality opens up by research, discussing, thinking and most of all by living – this test or inquiry is only a simple tool for better understanding about your self. Remember: temperament is only one dimension in humans wide and multidimensional personality.',\r\n    'character': 'Peronality:',\r\n    'weaknesses': 'Weaknesses:',\r\n    'tip': 'To train:',\r\n    'btn.start': 'Start inquery',\r\n    'btn.reset': 'Start over',\r\n    'btn.next': 'Next',\r\n    'btn.previous': 'Previous',\r\n    'btn.submit': 'Show results',\r\n    'btn.languageSelector' : 'Change language'\r\n  }\r\n}\r\n\r\nexport default lang;\r\n","\r\nimport React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nclass Header extends Component {\r\n  render(){\r\n      return (\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n                <h1><FormattedMessage id=\"homepage.headline\" /></h1>\r\n            </div>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","\r\nimport React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nclass PageInfo extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n          <div className=\"col\">\r\n            <div className=\"infoText\" >\r\n              <p>\r\n                <FormattedMessage\r\n                    id=\"homepage.info\"\r\n                    values={{\r\n                        newP: <span><br /><br /></span>,\r\n                    }} />\r\n              </p>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <button className=\"btn btn-primary btn-lg\" onClick={() => {this.props.startSurvey()}}  >\r\n                      <FormattedMessage id=\"btn.start\" />\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"col-md-6 order-first order-md-last\">\r\n                    <select className=\"form-select form-select-lg mb-3\"\r\n                      onChange={e => {\r\n                          this.props.changeLang(e.target.value);\r\n                      }}>\r\n                      <FormattedMessage id=\"btn.languageSelector\">\r\n                        {(message) => <option value=\"default\"> {message}</option>}\r\n                      </FormattedMessage>\r\n                      <option value=\"fi\">Suomeksi </option>\r\n                      <option value=\"en\">English </option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PageInfo;\r\n","\r\nimport React, { Component } from 'react';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { VictoryPie, VictoryLabel } from 'victory';\r\nimport update from 'immutability-helper';\r\n\r\nimport { IntlProvider } from \"react-intl\";\r\nimport messages from '../messages';\r\n\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport Header  from './Header';\r\nimport PageInfo from './Pageinfo';\r\n\r\nimport './styles/App.scss';\r\n\r\nimport data_fi from './data/data_fi.json';\r\nimport data_en from './data/data_en.json';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            answers: [],\r\n            analysis: [],\r\n            activeQuestion: 0,\r\n            chartData: [{ y: 5 }, { y: 5 }, { y: 5 }, { y: 5 }],\r\n            showSummary: false,\r\n            lang: this.props.lang,\r\n            hideInfo: false\r\n        };\r\n\r\n        this.state.data = (this.state.lang === 'en') ? data_en : data_fi\r\n\r\n        this.changeLang = this.changeLang.bind(this);\r\n        this.startSurvey = this.startSurvey.bind(this);\r\n        this.onRadioChange = this.onRadioChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    // Language selector\r\n    changeLang = (language) => {\r\n      this.setState({ lang : language });\r\n\r\n      if(language === 'fi'){\r\n        document.title = \"Testaa temperamenttisi\";\r\n        this.setState({ data : data_fi });\r\n      }\r\n      if(language === 'en'){\r\n        document.title = \"Temperament inquery\";\r\n        this.setState({ data :  data_en });\r\n      }\r\n\r\n    }\r\n\r\n    // Answer selection\r\n    onRadioChange = (e) => {\r\n        if (e.target.dataset.order) {\r\n            var i = parseInt(e.target.dataset.order);\r\n            this.setState(\r\n                update(this.state, {\r\n                    answers: {\r\n                        [i]: {\r\n                            $set: e.target.value\r\n                        }\r\n                    }\r\n            }));\r\n\r\n            // On answer change go automaticly to next one\r\n            if( (this.state.activeQuestion <= this.state.data.questions.length - 2)  ){\r\n              var goToNext = this.state.activeQuestion + 1;\r\n              this.setState({\r\n                  activeQuestion: goToNext\r\n              })\r\n            }\r\n        }\r\n    }\r\n\r\n    // Start survey\r\n    startSurvey = () => {\r\n      this.resetSurvey();\r\n      this.setState({\r\n          hideInfo: true\r\n      })\r\n    }\r\n\r\n    // Reset and start over\r\n    resetSurvey = () => {\r\n        this.setState({\r\n            answers: [],\r\n            analysis: [],\r\n            activeQuestion: 0,\r\n            chartData: [{ y: 5 }, { y: 5 }, { y: 5 }, { y: 5 }],\r\n            showSummary: false,\r\n            hideInfo: false\r\n        })\r\n    }\r\n\r\n    // Summary text\r\n    summaryText = () => {\r\n      return (\r\n          <div className=\"summaryText\">\r\n            <h2><FormattedMessage id=\"summary.headline\" /></h2>\r\n            {Object.keys(this.state.analysis).map(analysis => (\r\n                <div className=\"div-analysis\" key={this.state.analysis[analysis].headline} >\r\n                    <div>\r\n                        <h5 style={{ backgroundColor: this.state.analysis[analysis].color }} >\r\n                            {this.state.analysis[analysis].headline}\r\n                        </h5>\r\n                        <p>\r\n                        <span><FormattedMessage id=\"character\" /></span><br />\r\n                          {this.state.analysis[analysis].pros}\r\n                        </p>\r\n                    </div>\r\n                    <p>\r\n                        <span><FormattedMessage id=\"weaknesses\"/></span><br />\r\n                        {this.state.analysis[analysis].cons}\r\n                    </p>\r\n                    <p>\r\n                        <span><FormattedMessage id=\"tip\" /></span><br />\r\n                        {this.state.analysis[analysis].tip}\r\n                    </p>\r\n                    <hr />\r\n                </div>\r\n            ))}\r\n\r\n            <button\r\n                onClick={() => {\r\n                    this.resetSurvey();\r\n                }}\r\n                type=\"button\"\r\n                className=\"btn btn-danger btn-lg\"><FormattedMessage id=\"btn.reset\" />\r\n            </button>\r\n          </div>\r\n        )\r\n    }\r\n    // Piechart of the summary\r\n    summaryChart = () => {\r\n        return (\r\n            <svg viewBox=\"0 0 400 400\">\r\n                <VictoryPie\r\n                standalone={false}\r\n                width={400} height={400}\r\n                colorScale={[this.state.data.types.red.color,\r\n                  this.state.data.types.green.color,\r\n                  this.state.data.types.blue.color,\r\n                  this.state.data.types.yellow.color]}\r\n                innerRadius={68} labelRadius={150}\r\n                animate={{ duration: 2000, onLoad: { duration: 1000 } }}\r\n                data={this.state.chartData}\r\n                style={{\r\n                    data: {\r\n                        fillOpacity: 0.93\r\n                    },\r\n                    labels: {\r\n                        size: 20,\r\n                        fill: \"#4d4d4d\"\r\n                    }\r\n                }}\r\n                />\r\n                <VictoryLabel\r\n                    textAnchor=\"middle\"\r\n                    style={{ fontSize: 100, fill: \"#E4952B\" }}\r\n                    x={200} y={200}\r\n                />\r\n            </svg>\r\n        )\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        var numRed = 0;\r\n        var numBlue = 0;\r\n        var numGreen = 0;\r\n        var numYellow = 0;\r\n        var totalQuestions = this.state.data.questions.length;\r\n\r\n        // Calculate answers based on colors\r\n        this.state.answers.map((color) => {\r\n\r\n            switch (color) {\r\n                case \"blue\": numBlue++;\r\n                    break;\r\n                case \"red\": numRed++;\r\n                    break;\r\n                case \"green\": numGreen++;\r\n                    break;\r\n                case \"yellow\": numYellow++;\r\n                    break;\r\n                default: break;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        // Get highest values color calues and create analysis array for summary\r\n        var analysis = [];\r\n        var summaries = [numRed, numBlue, numGreen, numYellow]\r\n        var max = Math.max(...summaries);\r\n        if (summaries[0] === max) {\r\n            analysis.push(this.state.data.types.red);\r\n        }\r\n\r\n        if (summaries[1] === max) {\r\n            analysis.push(this.state.data.types.blue);\r\n        }\r\n\r\n        if (summaries[2] === max) {\r\n            analysis.push(this.state.data.types.green);;\r\n        }\r\n\r\n        if (summaries[3] === max) {\r\n            analysis.push(this.state.data.types.yellow);\r\n        }\r\n        // -->\r\n\r\n        var chartData = [\r\n            { y: numRed, label: (numRed / totalQuestions  * 100).toFixed(2) + \"%\" },\r\n            { y: numGreen, label: (numGreen / totalQuestions * 100).toFixed(2) + \"%\" },\r\n            { y: numBlue, label: (numBlue / totalQuestions * 100).toFixed(2) + \"%\" },\r\n            { y: numYellow, label: (numYellow / totalQuestions * 100).toFixed(2) + \"%\" }\r\n        ];\r\n\r\n        this.setState(() => ({\r\n            showSummary: true,\r\n            analysis: analysis,\r\n        }), () => {\r\n            setTimeout(() => {\r\n                this.setState(() => ({\r\n                    chartData: chartData\r\n                }));\r\n            }, 150);\r\n        });\r\n    }\r\n\r\n    // Navigate questions back and forth\r\n    handleNavigate = (goBack) => {\r\n        if (typeof goBack !== \"undefined\") {\r\n            var direction = (goBack === true) ? this.state.activeQuestion - 1 : this.state.activeQuestion + 1;\r\n            this.setState({\r\n                activeQuestion: direction\r\n            })\r\n        }\r\n    }\r\n\r\n    getQuestions = () => {\r\n        var newdata = this.state.data.questions.map((data, index) => {\r\n            if (this.state.activeQuestion === index) {\r\n            return (\r\n                <div key=\"question-{index+1}\">\r\n                    <h4>{data.question}</h4>\r\n                    <ul>\r\n                        {Object.keys(data.answers).map((answer, i) => (\r\n                            <li key={i}>\r\n                                <label className={this.state.answers[index] === data.answers[answer].color  ? \"radio-selected\" : \"\"} >\r\n                                    <span>{answer}</span>\r\n\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        value={data.answers[answer].color}\r\n                                        data-order={index}\r\n                                        checked={this.state.answers[index] === data.answers[answer].color }\r\n                                        onChange={this.onRadioChange}\r\n                                    />\r\n                                </label>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n                )\r\n            } return \"\"\r\n        })\r\n        return newdata;\r\n    }\r\n\r\n    surveyNavigation = () => {\r\n        return (\r\n        <div>\r\n            <button\r\n              onClick={() => {\r\n                  this.handleNavigate(true);\r\n              }}\r\n              type = \"button\"\r\n              disabled = { this.state.activeQuestion < 1 }\r\n              className=\"btn btn-warning btn-lg\" >\r\n                  <FormattedMessage id=\"btn.previous\" />\r\n            </button>\r\n\r\n            <span className=\"questionNumbers\" >\r\n              {this.state.activeQuestion +1 }/{this.state.data.questions.length}\r\n            </span>\r\n\r\n            <button\r\n                onClick={() => {\r\n                    this.handleNavigate(false);\r\n                }}\r\n                type=\"button\"\r\n                disabled={(this.state.activeQuestion >= this.state.data.questions.length - 1) || (this.state.activeQuestion >= this.state.answers.length )}\r\n                className=\"btn btn-success btn-lg\">\r\n                    <FormattedMessage id=\"btn.next\" />\r\n            </button>\r\n            <br />\r\n            {this.state.answers.length === this.state.data.questions.length && (\r\n              <FormattedMessage id=\"btn.submit\" >\r\n                  {val =>\r\n                      <input type=\"submit\" value={val} className=\"btn btn-primary btn-lg\" />\r\n                  }\r\n              </FormattedMessage>)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <IntlProvider locale={this.state.lang} key={this.state.lang} messages={messages[this.state.lang]}>\r\n            <div className=\"App\">\r\n                <div className=\"container\">\r\n                    <Header />\r\n                    {this.state.showSummary === false && (\r\n                        <div>\r\n                          {this.state.hideInfo === false && (\r\n                            <PageInfo\r\n                              changeLang={this.changeLang}\r\n                              startSurvey={this.startSurvey}\r\n                            />)}\r\n                            {this.state.hideInfo === true && (\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <form onSubmit={this.onSubmit} className=\"surveyForm\">\r\n                                        {this.getQuestions()}\r\n                                        {this.surveyNavigation()}\r\n                                    </form>\r\n                                </div>\r\n                            </div>)}\r\n                        </div>\r\n                    )}\r\n                    <TransitionGroup component={null}>\r\n                    {this.state.showSummary === true && (\r\n                        <CSSTransition classNames=\"chart\" timeout={300}>\r\n                            <div className=\"row summaryWrapper\">\r\n                                    <div className=\"col-lg-6\">\r\n                                    {this.summaryText()}\r\n                                </div>\r\n                                    <div className=\"col-lg-6\">\r\n                                    {this.summaryChart()}\r\n                                </div>\r\n                            </div>\r\n                        </CSSTransition>\r\n                    )}\r\n                    </TransitionGroup>\r\n                </div>\r\n            </div>\r\n            </IntlProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.scss';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst lang = (/^en\\b/.test(navigator.language)) ? \"en\" : \"fi\";\r\n\r\nReactDOM.render(\r\n   <React.StrictMode >\r\n      <App lang={lang} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}