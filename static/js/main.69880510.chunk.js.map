{"version":3,"sources":["component/App.js","serviceWorker.js","index.js"],"names":["App","onRadioChange","e","target","dataset","order","i","parseInt","setState","update","state","answers","$set","value","resetSurvey","activeQuestion","chartData","y","finalChartData","summaryColor","summaryText","showSummary","className","map","analysis","onClick","id","type","summaryChart","viewBox","standalone","width","height","colorScale","innerRadius","labelRadius","animate","duration","onLoad","data","style","fillOpacity","labels","size","fill","backgroundColor","textAnchor","fontSize","x","text","onSubmit","preventDefault","numRed","numBlue","numGreen","numYellow","color","colorText","summaries","max","Math","push","types","red","length","blue","green","yellow","label","questions","toFixed","setTimeout","handleNavigate","goBack","direction","getQuestions","index","key","question","Object","keys","answer","data-order","checked","onChange","surveyNavigation","disabled","bind","this","TransitionGroup","component","CSSTransition","classNames","timeout","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69880510.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { VictoryPie, VictoryLabel } from 'victory';\r\nimport update from 'immutability-helper';\r\nimport './styles/App.scss';\r\nimport data from './data/data.json'\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            answers: [],\r\n            activeQuestion: 0,\r\n            chartData: [{ y: 5 }, { y: 5 }, { y: 5 }, { y: 5 }],\r\n            summaryColor: \"\",\r\n            summaryText: \"\",\r\n            showSummary: false\r\n        };\r\n\r\n        this.onRadioChange = this.onRadioChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onRadioChange = (e) => {\r\n        if (e.target.dataset.order) {\r\n            var i = parseInt(e.target.dataset.order);\r\n            this.setState(\r\n                update(this.state, {\r\n                    answers: {\r\n                        [i]: {\r\n                            $set: e.target.value\r\n                        }\r\n                    }\r\n            }));\r\n        }\r\n    }\r\n\r\n    resetSurvey = () => {\r\n        this.setState({\r\n            answers: [],\r\n            activeQuestion: 0,\r\n            chartData: [{ y: 5 }, { y: 5 }, { y: 5 }, { y: 5 }],\r\n            finalChartData: [],\r\n            summaryColor: \"\",\r\n            summaryText: [],\r\n            showSummary: false\r\n        })\r\n    }\r\n\r\n\r\n\r\n    summaryText = () => {\r\n            return (\r\n                <div className=\"summaryText\">\r\n\r\n                    <h2>Olet väriltäsi {this.state.summaryColor}</h2>\r\n\r\n                    {this.state.summaryText.map(analysis => (\r\n                        <p>\r\n                            {analysis}\r\n                        </p>\r\n                    ))}\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            this.resetSurvey();\r\n                        }}\r\n                        id=\"resetBtn\"\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger\"> Aloita alusta\r\n                </button>\r\n                </div>\r\n            )\r\n\r\n    }\r\n    summaryChart = () => {\r\n\r\n        return (\r\n            <svg viewBox=\"0 0 400 400\">\r\n                <VictoryPie\r\n                standalone={false}\r\n                width={400} height={400}\r\n                colorScale={[\"red\", \"green\", \"blue\", \"yellow\"]}\r\n                innerRadius={68} labelRadius={150}\r\n                animate={{ duration: 2000, onLoad: { duration: 1000 } }}\r\n                data={this.state.chartData}\r\n                style={{\r\n                    data: {\r\n                        fillOpacity: 0.93\r\n                    },\r\n                    labels: {\r\n                        size: 20,\r\n                        fill: \"#4d4d4d\",\r\n                        backgroundColor: \"#000\"\r\n                    }\r\n                }}\r\n                />\r\n                <VictoryLabel\r\n                    textAnchor=\"middle\"\r\n                    style={{ fontSize: 100, fill: \"#E4952B\" }}\r\n                    x={200} y={200}\r\n                    text={'\\u2606'}\r\n                />\r\n            </svg>\r\n        )\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        var numRed = 0;\r\n        var numBlue = 0;\r\n        var numGreen = 0;\r\n        var numYellow = 0;\r\n\r\n        // Calculate answers based on colors\r\n        this.state.answers.map((color) => {\r\n\r\n            switch (color) {\r\n                case \"blue\": numBlue++;\r\n                    break;\r\n                case \"red\": numRed++;\r\n                    break;\r\n                case \"green\": numGreen++;\r\n                    break;\r\n                case \"yellow\": numYellow++;\r\n                    break;\r\n                default: break;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        var color = \"\";\r\n        var colorText = [];\r\n        var summaries = [numRed, numBlue, numGreen, numYellow]\r\n        var max = Math.max(...summaries);\r\n\r\n        if (summaries[0] === max) {\r\n            colorText.push(data.types.red);\r\n            color = \"Punainen\";\r\n        }\r\n\r\n        if (summaries[1] === max) {\r\n            if (colorText.length > 0 && color.length > 0 ) {\r\n                color = color + \", \";\r\n            }\r\n            colorText.push(data.types.blue);\r\n            color = color + \"Sininen\";\r\n        }\r\n\r\n        if (summaries[2] === max) {\r\n            if (colorText.length > 0 && color.length > 0) {\r\n                color = color + \", \";\r\n            }\r\n            colorText.push(data.types.green);\r\n            color = color + \"Vihreä\";\r\n        }\r\n\r\n        if (summaries[3] === max) {\r\n            if (colorText.length > 0 && color.length > 0) {\r\n                color = color + \", \";\r\n            }\r\n            colorText.push(data.types.yellow);\r\n            color = color + \"Keltainen\";\r\n        }\r\n\r\n        var chartData = [\r\n            { y: numRed, label: (numRed / data.questions.length * 100).toFixed(2) + \"%\" },\r\n            { y: numGreen, label: (numGreen / data.questions.length * 100).toFixed(2) + \"%\" },\r\n            { y: numBlue, label: (numBlue / data.questions.length * 100).toFixed(2) + \"%\" },\r\n            { y: numYellow, label: (numYellow / data.questions.length * 100).toFixed(2) + \"%\" }\r\n        ];\r\n\r\n        this.setState(() => ({\r\n            showSummary: true,\r\n            summaryColor: color,\r\n            summaryText: colorText,\r\n        }), () => {\r\n            setTimeout(() => {\r\n                this.setState(() => ({\r\n                    chartData: chartData\r\n                }));\r\n            }, 150);\r\n        });\r\n    }\r\n\r\n    // Navigate questions back and forth\r\n    handleNavigate = (goBack) => {\r\n        if (typeof goBack !== \"undefined\") {\r\n            var direction = (goBack === true) ? this.state.activeQuestion - 1 : this.state.activeQuestion + 1;\r\n            this.setState({\r\n                activeQuestion: direction\r\n            })\r\n        }\r\n    }\r\n\r\n    getQuestions = () => {\r\n        var newdata = data.questions.map((data, index) => {\r\n            if (this.state.activeQuestion === index) {\r\n            return (\r\n                <div key=\"question-{index+1}\">\r\n                    <h4>{data.question}:</h4>\r\n                    <ul>\r\n                        {Object.keys(data.answers).map((answer, i) => (\r\n                            <li key={i}>\r\n                                <label className={this.state.answers[index] === data.answers[answer].color  ? \"radio-selected\" : \"\"} >\r\n                                    <span>{answer}</span>\r\n\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        value={data.answers[answer].color}\r\n                                        data-order={index}\r\n                                        checked={this.state.answers[index] === data.answers[answer].color }\r\n                                        onChange={this.onRadioChange}\r\n                                    />\r\n                                </label>\r\n                            </li>\r\n                        ))}\r\n                    </ul> \r\n                </div>\r\n                )\r\n            }\r\n        })\r\n\r\n        return newdata;\r\n    }\r\n\r\n    surveyNavigation = () => {\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        this.handleNavigate(true);\r\n                    }}\r\n                    type = \"button\"\r\n                    disabled = { this.state.activeQuestion < 1 }\r\n                    className = \"btn btn-warning\" > Edellinen\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.handleNavigate(false);\r\n                    }}\r\n                    type=\"button\"\r\n                    disabled={this.state.activeQuestion >= data.questions.length - 1}\r\n                    className=\"btn btn-success\"> Seuraava\r\n                </button>\r\n                <br />\r\n                {this.state.answers.length === data.questions.length && (\r\n                    <input className=\"btn btn-primary\" type=\"submit\" value=\"Näytä tulokseni\" /> ) \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n \r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <h1>21 kysymystä persoonallisuudestasi</h1>\r\n                        </div>\r\n                    </div>\r\n                        {this.state.showSummary === false && (\r\n                            <div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <p>\r\n                                            Allaoleva testi on kysely, jonka avulla saat alustavan käsityksen omasta temperamentistasi.\r\n                                            Valitse se vaihtoehto, joka kuvastaa itseäsi parhaiten juuri nyt.\r\n\t\t\t                            </p>\r\n                                        <p>\r\n                                            Persoonallisuutesi kokonaisuus selviää tutkimalla, keskustelemalla, pohtimalla ja ennen kaikkea elämällä\r\n                                            – testi tai kysely toimii aina vain itsetuntemuksen ja ihmistuntemuksen apuvälineenä.\r\n                                            Muista: temperamentti on vain yksi ulottuvuus ihmisen laajassa ja moniulotteisesta persoonallisuudesta.\r\n\t\t\t                            </p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <form onSubmit={this.onSubmit} className=\"surveyForm\">\r\n                                            {this.getQuestions()}\r\n                                            {this.surveyNavigation()}\r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    )}\r\n                    <TransitionGroup component={null}>\r\n                    {this.state.showSummary === true && (\r\n                        <CSSTransition classNames=\"chart\" timeout={300}>\r\n                            <div className=\"row\">\r\n                                    <div className=\"col-lg-6\">\r\n                                    {this.summaryText()}\r\n                                </div>\r\n                                    <div className=\"col-lg-6 chart\">\r\n                                    {this.summaryChart()}\r\n                                </div>\r\n                            </div>\r\n                        </CSSTransition> \r\n                    )}\r\n                    </TransitionGroup>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}